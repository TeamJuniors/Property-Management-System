import { DomAdapter } from './__private_imports__';
export declare class Parse5DomAdapter extends DomAdapter {
    static makeCurrent(): void;
    parse(_templateHtml: string): void;
    hasProperty(_element: any, name: string): boolean;
    setProperty(el: any, name: string, value: any): void;
    getProperty(el: any, name: string): any;
    invoke(_el: any, _methodName: string, _args: any[]): any;
    logError(error: string): void;
    log(error: string): void;
    logGroup(error: string): void;
    logGroupEnd(): void;
    readonly attrToPropMap: {
        [key: string]: string;
    };
    query(_selector: any): any;
    querySelector(el: any, selector: string): any;
    querySelectorAll(el: any, selector: string): any[];
    elementMatches(node: any, selector: string, matcher?: any): boolean;
    on(el: any, evt: any, listener: any): void;
    onAndCancel(el: any, evt: any, listener: any): Function;
    dispatchEvent(el: any, evt: any): void;
    createMouseEvent(eventType: any): any;
    createEvent(eventType: string): any;
    preventDefault(event: any): void;
    isPrevented(event: any): boolean;
    getInnerHTML(el: any): string;
    getTemplateContent(_el: any): any;
    getOuterHTML(el: any): string;
    nodeName(node: any): string;
    nodeValue(node: any): string;
    type(_node: any): string;
    content(node: any): string;
    firstChild(el: any): any;
    nextSibling(el: any): any;
    parentElement(el: any): any;
    childNodes(el: any): any[];
    childNodesAsList(el: any): any[];
    clearNodes(el: any): void;
    appendChild(el: any, node: any): void;
    removeChild(el: any, node: any): void;
    replaceChild(_el: any, _newNode: any, _oldNode: any): void;
    remove(el: any): any;
    insertBefore(el: any, node: any): void;
    insertAllBefore(el: any, nodes: any): void;
    insertAfter(el: any, node: any): void;
    setInnerHTML(el: any, value: any): void;
    getText(el: any, isRecursive?: boolean): string;
    setText(el: any, value: string): void;
    getValue(el: any): string;
    setValue(el: any, value: string): void;
    getChecked(el: any): boolean;
    setChecked(el: any, value: boolean): void;
    createComment(text: string): any;
    createTemplate(html: any): any;
    createElement(tagName: any): any;
    createElementNS(ns: any, tagName: any): any;
    createTextNode(text: string): any;
    createScriptTag(attrName: string, attrValue: string): any;
    createStyleElement(css: string): any;
    createShadowRoot(el: any): any;
    getShadowRoot(el: any): any;
    getHost(el: any): string;
    getDistributedNodes(_el: any): any[];
    clone(node: any): any;
    getElementsByClassName(element: any, name: string): any[];
    getElementsByTagName(_element: any, _name: string): any[];
    classList(element: any): string[];
    addClass(element: any, className: string): void;
    removeClass(element: any, className: string): void;
    hasClass(element: any, className: string): boolean;
    hasStyle(element: any, styleName: string, styleValue?: string): boolean;
    _readStyleAttribute(element: any): {};
    _writeStyleAttribute(element: any, styleMap: any): void;
    setStyle(element: any, styleName: string, styleValue: string): void;
    removeStyle(element: any, styleName: string): void;
    getStyle(element: any, styleName: string): string;
    tagName(element: any): string;
    attributeMap(element: any): Map<string, string>;
    hasAttribute(element: any, attribute: string): boolean;
    hasAttributeNS(_element: any, _ns: string, _attribute: string): boolean;
    getAttribute(element: any, attribute: string): string;
    getAttributeNS(_element: any, _ns: string, _attribute: string): string;
    setAttribute(element: any, attribute: string, value: string): void;
    setAttributeNS(_element: any, _ns: string, _attribute: string, _value: string): void;
    removeAttribute(element: any, attribute: string): void;
    removeAttributeNS(_element: any, _ns: string, _name: string): void;
    templateAwareRoot(el: any): any;
    createHtmlDocument(): any;
    defaultDoc(): any;
    getBoundingClientRect(_el: any): any;
    getTitle(): string;
    setTitle(newTitle: string): void;
    isTemplateElement(el: any): boolean;
    isTextNode(node: any): boolean;
    isCommentNode(node: any): boolean;
    isElementNode(node: any): boolean;
    hasShadowRoot(node: any): boolean;
    isShadowRoot(node: any): boolean;
    importIntoDoc(node: any): any;
    adoptNode(node: any): any;
    getHref(el: any): string;
    getEventKey(_event: any): string;
    resolveAndSetHref(el: any, baseUrl: string, href: string): void;
    _buildRules(parsedRules: any, css?: any): any[];
    supportsDOMEvents(): boolean;
    supportsNativeShadowDOM(): boolean;
    getGlobalEventTarget(target: string): any;
    getBaseHref(): string;
    resetBaseElement(): void;
    getHistory(): any;
    getLocation(): any;
    getUserAgent(): string;
    getData(el: any, name: string): string;
    getComputedStyle(_el: any): any;
    setData(el: any, name: string, value: string): void;
    setGlobalVar(path: string, value: any): void;
    supportsWebAnimation(): boolean;
    performanceNow(): number;
    getAnimationPrefix(): string;
    getTransitionEnd(): string;
    supportsAnimation(): boolean;
    supportsCookies(): boolean;
    getCookie(_name: string): string;
    setCookie(_name: string, _value: string): void;
    animate(_element: any, _keyframes: any[], _options: any): any;
}
