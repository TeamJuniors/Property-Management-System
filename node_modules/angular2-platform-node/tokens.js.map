{"version":3,"file":"tokens.js","sourceRoot":"","sources":["../../../../modules/platform-node/tokens.ts"],"names":[],"mappings":";AAAA,qBAA4B,eAAe,CAAC,CAAA;AAC5C,uBAA8B,iBAAiB,CAAC,CAAA;AAChD,uBAA8B,iBAAiB,CAAC;AAAvC,+CAAuC;AAGnC,kBAAU,GAAgB,IAAI,kBAAW,CAAC,YAAY,CAAC,CAAC;AACxD,mBAAW,GAAgB,IAAI,kBAAW,CAAC,aAAa,CAAC,CAAC;AAC1D,mBAAW,GAAgB,IAAI,kBAAW,CAAC,aAAa,CAAC,CAAC;AAC1D,kBAAU,GAAgB,IAAI,kBAAW,CAAC,YAAY,CAAC,CAAC;AACxD,mBAAW,GAAG,IAAI,kBAAW,CAAC,aAAa,CAAC,CAAC;AAG1D;IACE,MAAM,CAAC;QACL,EAAE,OAAO,EAAE,sBAAa,EAAE,QAAQ,EAAE,SAAS,EAAE;QAC/C,EAAE,OAAO,EAAE,mBAAW,EAAE,QAAQ,EAAE,YAAY,EAAE;QAChD,EAAE,OAAO,EAAE,kBAAU,EAAE,QAAQ,EAAE,WAAW,EAAE;KAC/C,CAAA;AACH,CAAC;AANe,oBAAY,eAM3B,CAAA;AAGD,4BAAmC,MAAM;IACvC,MAAM,CAAC,YAAY,EAAE;SAClB,MAAM,CAAC,UAAC,QAAQ,IAAK,OAAA,CAAC,QAAQ,CAAC,QAAQ,IAAI,MAAM,CAAC,EAA7B,CAA6B,CAAC;SACnD,GAAG,CAAC,UAAC,QAAQ;QACZ,IAAM,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAC9B,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC,CAAC,CAAC;AACP,CAAC;AARe,0BAAkB,qBAQjC,CAAA","sourcesContent":["import { OpaqueToken } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\nexport { APP_BASE_HREF } from '@angular/common';\n\n// export const BASE_URL: OpaqueToken = APP_BASE_HREF;\nexport const ORIGIN_URL: OpaqueToken = new OpaqueToken('ORIGIN_URL');\nexport const REQUEST_URL: OpaqueToken = new OpaqueToken('REQUEST_URL');\nexport const PRIME_CACHE: OpaqueToken = new OpaqueToken('PRIME_CACHE');\nexport const COOKIE_KEY: OpaqueToken = new OpaqueToken('COOKIE_KEY');\nexport const NODE_APP_ID = new OpaqueToken('NODE_APP_ID');\n\n// @internal\nexport function getUrlConfig() {\n  return [\n    { provide: APP_BASE_HREF, useValue: 'baseUrl' },\n    { provide: REQUEST_URL, useValue: 'requestUrl' },\n    { provide: ORIGIN_URL, useValue: 'originUrl' }\n  ]\n}\n\n// @internal\nexport function createUrlProviders(config) {\n  return getUrlConfig()\n    .filter((provider) => (provider.useValue in config))\n    .map((provider) => {\n      const key = provider.useValue;\n      provider.useValue = config[key];\n      return provider;\n    });\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}