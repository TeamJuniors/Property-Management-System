{"version":3,"file":"node-http.js","sourceRoot":"","sources":["../../../../modules/platform-node/node-http.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  NgModule,\n  Injectable,\n  NgZone,\n  Inject,\n  Optional,\n  EventEmitter\n} from '@angular/core';\n\nimport {\n  Http,\n  XHRConnection,\n  ConnectionBackend,\n  XHRBackend,\n  Headers,\n  ReadyState,\n  Request,\n  RequestOptions,\n  RequestMethod,\n  Response,\n  ResponseOptions,\n  RequestOptionsArgs,\n  ResponseType,\n  BrowserXhr,\n  XSRFStrategy,\n\n  Jsonp,\n  JSONPBackend,\n  BaseResponseOptions,\n  BaseRequestOptions,\n} from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as url from 'url';\n\n\nimport { APP_BASE_HREF, ORIGIN_URL, REQUEST_URL } from './tokens';\nimport { isPresent, isSuccess } from './helper';\n\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n\n\ndeclare var Zone: any;\nexport class PreloadHttp extends Http {\n  _async: number = 0;\n  // _rootNode;\n  // _activeNode;\n  constructor(\n    protected _backend: ConnectionBackend,\n    protected _defaultOptions: RequestOptions,\n    /*@Optional() @Inject(PRIME_CACHE) protected prime: boolean = false*/) {\n\n    super(_backend, _defaultOptions);\n\n    // var _rootNode = { children: [], res: null };\n    // this._rootNode = _rootNode;\n    // this._activeNode = _rootNode;\n\n  }\n  preload(_url, factory) {\n\n    var obs = new EventEmitter(false);\n\n\n    // var currentNode = null;\n    // if (this.prime) {\n\n    //   if (isPresent(this._activeNode)) {\n    //     currentNode = { children: [], res: null };\n    //     this._activeNode.children.push(currentNode);\n    //   }\n    // }\n\n    // We need this to ensure all ajax calls are done before rendering the app\n    this._async += 1;\n    var request = factory();\n\n    request\n    .subscribe({\n        next: (response) => {\n          // if (this.prime) {\n          //   let headers = response.headers.toJSON();\n          //   // TODO(gdi2290): fix Http to include the url\n          //   let res = (<any>Object).assign({}, response, { headers, url });\n\n          //   if (isPresent(currentNode)) {\n          //     currentNode.res = res;\n          //   }\n          // }\n          obs.next(response);\n        },\n        error: (e) => {\n          obs.error(e);\n          this._async -= 1;\n        },\n        complete: () => {\n          // if (this.prime) {\n          //   this._activeNode = currentNode;\n          //   this._activeNode = null;\n          // }\n          obs.complete();\n          this._async -= 1;\n        }\n    });\n\n    return obs;\n  }\n\n  request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any> {\n    return this.preload(url, () => super.request(url, options));\n  }\n\n  get(url: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any> {\n    return this.preload(url, () => super.get(url, options));\n  }\n  post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any> {\n    return this.preload(url, () => super.post(url, body, options));\n  }\n  put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any> {\n    return this.preload(url, () => super.put(url, body, options));\n  }\n  delete(url: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any> {\n    return this.preload(url, () => super.delete(url, options));\n  }\n  patch(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any> {\n    return this.preload(url, () => super.patch(url, body, options));\n  }\n  head(url: string, options?: RequestOptionsArgs): Observable<Response> | EventEmitter<any> {\n    return this.preload(url, () => super.head(url, options));\n  }\n}\n\n\n\nexport class NodeConnection implements XHRConnection {\n  public readyState: ReadyState;\n  public request: Request;\n  public response: Observable<Response> | Observable<any>;\n\n  constructor(\n    req: Request,\n    baseResponseOptions: ResponseOptions,\n    // ngZone: NgZone,\n     originUrl: string = '',\n      baseUrl?: string,\n    // @Optional() @Inject(Cookie) cookie?: Cookie,\n    // @Optional() @Inject(COOKIE_KEY) cookieKey?: any\n    ) {\n\n    this.request = req;\n    // cookieKey = cookieKey || 'universal_angular2';\n    baseUrl = baseUrl || '/';\n\n    if (originUrl === null) {\n      throw new Error('ERROR: Please move ORIGIN_URL to platformProviders');\n    }\n\n    let _reqInfo: any = url.parse(url.resolve(url.resolve(originUrl, baseUrl), req.url));\n    _reqInfo.method = RequestMethod[req.method].toUpperCase();\n\n    // if (isPresent(cookie)) {\n    //   if (!isPresent(req.headers)) {\n    //     req.headers = new Headers();\n    //   }\n\n    //   let cookieValue;\n    //   try {\n    //     cookieValue = cookie.get(cookieKey);\n    //   } catch (e) {}\n    //   if (cookieValue) {\n    //     req.headers.append('Cookie', cookieValue);\n    //   }\n    // }\n\n    if (isPresent(req.headers)) {\n      _reqInfo.headers = {};\n      req.headers.forEach((values, name) => _reqInfo.headers[name] = values.join(','));\n    }\n    _reqInfo.headers = _reqInfo.headers || {};\n    // needed for node xhrs\n    _reqInfo.headers['user-agent'] = _reqInfo.headers['user-agent'] || 'Angular 2 Universal';\n\n    this.response = new Observable(responseObserver => {\n      let nodeReq;\n      // ngZone.run(() => {\n        // http or https\n        let xhrHttp: any = http;\n        if (_reqInfo.protocol === 'https:') {\n          xhrHttp = https;\n        }\n\n        nodeReq = xhrHttp.request(_reqInfo, (res: http.IncomingMessage) => {\n          let body = '';\n          res.on('data', (chunk) => body += chunk);\n\n          let status = res.statusCode;\n          let headers = new Headers(res.headers);\n          let url = res.url;\n\n          res.on('end', () => {\n            let responseOptions = new ResponseOptions({body, status, headers, url});\n            let response = new Response(responseOptions);\n\n            if (isSuccess(status)) {\n              // ngZone.run(() => {\n                responseObserver.next(response);\n              // });\n              // ngZone.run(() => {\n                responseObserver.complete();\n              // });\n              return;\n            }\n            // ngZone.run(() => {\n              responseObserver.error(response);\n            // });\n          });\n        });\n      // });\n\n      let onError = (err) => {\n        let responseOptions = new ResponseOptions({body: err, type: ResponseType.Error});\n        if (isPresent(baseResponseOptions)) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        // ngZone.run(() => {\n          responseObserver.error(new Response(responseOptions));\n        // });\n      };\n\n      nodeReq.on('error', onError);\n\n      nodeReq.write(req.text());\n      nodeReq.end();\n\n      return () => {\n        nodeReq.removeListener('error', onError);\n        nodeReq.abort();\n      };\n    });\n  }\n\n  // This method can be reeused as it should be compatible\n  setDetectedContentType = XHRConnection.prototype.setDetectedContentType;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Request, },\n{type: ResponseOptions, },\n{type: undefined, decorators: [{ type: Inject, args: [ORIGIN_URL, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\n\n\nexport class NodeBackend extends XHRBackend {\n  constructor(\n    private baseResponseOptions: ResponseOptions,\n    _browserXHR: BrowserXhr,\n    _xsrfStrategy: XSRFStrategy,\n    _ngZone: NgZone,\n     private _baseUrl: string,\n     private _originUrl: string) {\n      super(_browserXHR, baseResponseOptions, _xsrfStrategy);\n    }\n\n  public createConnection(request: Request): NodeConnection {\n    return new NodeConnection(request, this.baseResponseOptions, /*this._ngZone,*/ this._baseUrl, this._originUrl);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ResponseOptions, },\n{type: BrowserXhr, },\n{type: XSRFStrategy, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Inject, args: [APP_BASE_HREF, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [ORIGIN_URL, ] }, ]},\n];\n}\n\n\nexport class NodeJSONPConnection {\n  public readyState: ReadyState;\n  public request: Request;\n  public response: Observable<Response> | Observable<any>;\n\n  constructor(\n    req: Request,\n    baseResponseOptions: ResponseOptions,\n    ngZone: NgZone,\n      originUrl: string = '',\n      baseUrl?: string) {\n\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n\n\n    this.request = req;\n    baseUrl = baseUrl || '/';\n\n    if (originUrl === null) {\n      throw new Error('ERROR: Please move ORIGIN_URL to platformProviders');\n    }\n\n    let _reqInfo: any = url.parse(url.resolve(url.resolve(originUrl, baseUrl), req.url));\n    _reqInfo.method = RequestMethod[req.method].toUpperCase();\n\n    if (isPresent(req.headers)) {\n      _reqInfo.headers = {};\n      req.headers.forEach((values, name) => _reqInfo.headers[name] = values.join(','));\n    }\n    _reqInfo.headers = _reqInfo.headers || {};\n    // needed for node jsonp xhrs\n    _reqInfo.headers['user-agent'] = _reqInfo.headers['user-agent'] || 'Angular 2 Universal';\n\n\n    this.response = new Observable(responseObserver => {\n      let nodeReq;\n      // http or https\n      let xhrHttp: any = http;\n      function DONE(response) {\n        responseObserver.next(response);\n        responseObserver.complete();\n      }\n      var __done = Zone.current.wrap(DONE, 'jsonp');\n\n      if (_reqInfo.protocol === 'https:') {\n        xhrHttp = https;\n      }\n\n      nodeReq = xhrHttp.request(_reqInfo, (res: http.IncomingMessage) => {\n        let body = '';\n        res.on('data', (chunk) => body += chunk);\n\n        let status = res.statusCode;\n        let headers = new Headers(res.headers);\n        let url = res.url;\n\n        res.on('end', () => {\n          var responseJson;\n          try {\n            if (body.indexOf('JSONP_CALLBACK') === -1) {\n              throw new Error('Http request ' + req.url + ' did not return the response with JSONP_CALLBACK()')\n            }\n            var responseFactory = new Function('JSONP_CALLBACK', body);\n            responseFactory(json => {\n              responseJson = json;\n            });\n          } catch (e) {\n            console.log('JSONP Error:', e);\n            return onError(e);\n          }\n\n          let responseOptions = new ResponseOptions({body: responseJson, status, headers, url});\n          let response = new Response(responseOptions);\n\n          if (isSuccess(status)) {\n            __done(response);\n            return;\n          }\n          ngZone.run(() => {\n            responseObserver.error(response);\n          });\n        });\n      });\n\n      function onError (err) {\n        let responseOptions = new ResponseOptions({body: err, type: ResponseType.Error});\n        if (isPresent(baseResponseOptions)) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      nodeReq.on('error', onError);\n\n      // nodeReq.write(req.text());\n      nodeReq.end();\n\n      return () => {\n        nodeReq.removeListener('error', onError);\n        nodeReq.abort();\n      };\n    });\n  }\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Request, },\n{type: ResponseOptions, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ORIGIN_URL, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nexport abstract class NodeJsonpBackend extends ConnectionBackend {}\n\n\nexport class NodeJsonpBackend_ extends NodeJsonpBackend /*implements JSONPBackend*/ {\n  constructor(\n    private _baseResponseOptions: ResponseOptions,\n    private _ngZone: NgZone,\n     private _baseUrl: string,\n     private _originUrl: string) {\n    super();\n  }\n\n  public createConnection(request: Request) {\n    return new NodeJSONPConnection(request, this._baseResponseOptions, this._ngZone, this._baseUrl, this._originUrl);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ResponseOptions, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Inject, args: [APP_BASE_HREF, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [ORIGIN_URL, ] }, ]},\n];\n}\n\nexport function _noop() {\n\n}\n\nexport const NODE_HTTP_PROVIDERS_COMMON: Array<any> = [\n  { provide: XSRFStrategy, useValue: _noop },\n  { provide: BrowserXhr, useValue: _noop },\n  { provide: RequestOptions, useClass: BaseRequestOptions },\n  { provide: ResponseOptions, useClass: BaseResponseOptions }\n];\n\nexport const NODE_HTTP_PROVIDERS = [\n  ...NODE_HTTP_PROVIDERS_COMMON,\n  { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n  { provide: XHRBackend, useClass: NodeBackend },\n];\n\nexport const NODE_JSONP_PROVIDERS = [\n  ...NODE_HTTP_PROVIDERS_COMMON,\n  { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n  { provide: JSONPBackend, useClass: NodeJsonpBackend_ },\n];\n\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions) {\n  return new PreloadHttp(xhrBackend, requestOptions);\n}\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions) {\n  return new PreloadHttp(jsonpBackend, requestOptions);\n}\n\n\nexport class NodeHttpModule {\n  static forRoot(config: any = {}) {\n    return NodeHttpModule.withConfig(config);\n  }\n  static withConfig(config: any = {}) {\n    var providers = [];\n    if (config.baseUrl) {\n      providers.push({ provide: APP_BASE_HREF, useValue: config.baseUrl });\n    }\n    if (config.requestUrl) {\n      providers.push({ provide: REQUEST_URL, useValue: config.requestUrl });\n    }\n    if (config.originUrl) {\n      providers.push({ provide: ORIGIN_URL, useValue: config.originUrl });\n    }\n    return {\n      ngModule: NodeHttpModule,\n      providers\n    };\n\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: NODE_HTTP_PROVIDERS\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\n\nexport class NodeJsonpModule {\n  static forRoot(config: any = {}) {\n    return NodeJsonpModule.withConfig(config);\n  }\n  static withConfig(config: any = {}) {\n    var providers = [];\n    if (config.baseUrl) {\n      providers.push({ provide: APP_BASE_HREF, useValue: config.baseUrl });\n    }\n    if (config.requestUrl) {\n      providers.push({ provide: REQUEST_URL, useValue: config.requestUrl });\n    }\n    if (config.originUrl) {\n      providers.push({ provide: ORIGIN_URL, useValue: config.originUrl });\n    }\n    return {\n      ngModule: NodeJsonpModule,\n      providers\n    };\n\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: NODE_JSONP_PROVIDERS\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}